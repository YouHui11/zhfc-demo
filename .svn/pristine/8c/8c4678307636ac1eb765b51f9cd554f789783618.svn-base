<template>
  <div class="zhfc_dialog_img">
    <zhfc-dialog
      v-dialogdrag
      :class="{ is_display_none: isActive }"
      :visible.sync="dialogVisible"
      :title="title"
      width="960px"
      @confirm="confirm"
    >
      <slot></slot>
      <zhfc-img-viewer 
        v-if="urlList.length"
        ref="zhfcImgViewer"
        :show-imgdetail="showImgdetail"
        :on-close="closeViewer"
        :url-list="urlList"
        @download="download"
        @removeImg="removeImg"
        @tofull="toggleTofull"
      />
    </zhfc-dialog>
  </div>
</template>
<script>
// 导入组件

export default {
  name: "zhfcDialogImg",
  data() {
    return {
      isActive: false,
      dialogVisible: false,
      showImgdetail: false,
    };
  },
  props: {
    title: {
      type: String,
    },
    // isActive: {
    //   type: Boolean,
    //   default: false,
    // },
    dialogVisibleImg: {
      type: Boolean,
      default: false,
    },
    showViewer: {
      type: Boolean,
      default: true,
    },
    urlList: {
      type: Array,
      default: () => [],
    },
    width: {
      type: String,
      default: "960px",
    },
    height: {
      type: String,
      default: "632px",
    },
  },

  watch: {
    dialogVisibleImg(val) {
      this.dialogVisible = val;
    },
    dialogVisible(val) {
      this.$emit("update:dialogVisibleImg", val);
    },
  },
  mounted() {
    console.log(this.dialogVisibleImg);
  },
  methods: {
    confirm() {},
    onPreview() {
      this.dialogVisible = true;
    },
    // 关闭查看器
    closeViewer() {
      this.$refs.zhfcImgViewer.toggleMode();
    },
    download(val) {
      this.$emit("download", val);
    },
    removeImg(val) {
      this.$emit("removeImg", val);
    },
    // 监听开启是否全屏
    toggleTofull(val) {
      this.isActive = val ? false : true;
    },
  },
  directives: {
    dialogdrag: function (el, binding, vnode, oldVnode) {
      // 弹框可拉伸最小宽高
      const minWidth = 400;
      const minHeight = 300;

      // 初始非全屏
      let isFullScreen = false;

      // 当前顶部高度
      let nowMarginTop = 0;

      // 获取弹框头部（这部分可双击全屏）
      const dialogHeaderEl = el.querySelector(".el-dialog__header");

      // 弹窗
      const dragDom = el.querySelector(".el-dialog");

      // 给弹窗加上overflow auto；不然缩小时框内的标签可能超出dialog；
      dragDom.style.overflow = "auto";

      // 清除选择头部文字效果
      // dialogHeaderEl.onselectstart = new Function("return false");

      // 头部加上可拖动cursor
      dialogHeaderEl.style.cursor = "move";

      // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);
      const sty =
        dragDom.currentStyle || window.getComputedStyle(dragDom, null);
      const moveDown = (e) => {
        // 鼠标按下，计算当前元素距离可视区的距离
        const disX = e.clientX - dialogHeaderEl.offsetLeft;
        const disY = e.clientY - dialogHeaderEl.offsetTop;

        // 获取到的值带px 正则匹配替换
        let styL, styT;

        // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px

        if (sty.left.includes("%")) {
          styL =
            +document.body.clientWidth * (+sty.left.replace(/\%/g, "") / 100);
          styT =
            +document.body.clientHeight * (+sty.top.replace(/\%/g, "") / 100);
        } else {
          styL = +sty.left.replace(/\px/g, "");
          styT = +sty.top.replace(/\px/g, "");
        }

        document.onmousemove = function (e) {
          // 通过事件委托，计算移动的距离
          const l = e.clientX - disX;
          const t = e.clientY - disY;

          // 移动当前元素
          dragDom.style.left = `${l + styL}px`;
          dragDom.style.top = `${t + styT}px`;

          // 将此时的位置传出去
          // binding.value({x:e.pageX,y:e.pageY})
        };

        document.onmouseup = function (e) {
          document.onmousemove = null;
          document.onmouseup = null;
        };
      };

      dialogHeaderEl.onmousedown = moveDown;
      // 当前宽高
      let nowWidth = 0;
      // let nowHight = 0
      // 双击头部全屏效果
      dialogHeaderEl.ondblclick = (e) => {
        if (isFullScreen === false) {
          // nowHight = dragDom.clientHeight
          nowWidth = dragDom.clientWidth;
          nowMarginTop = dragDom.style.marginTop;

          dragDom.style.left = 0;
          dragDom.style.top = 0;
          dragDom.style.height = "100VH";
          dragDom.style.width = "100VW";
          dragDom.style.marginTop = 0;

          isFullScreen = true;

          dialogHeaderEl.style.cursor = "initial";
          dialogHeaderEl.onmousedown = null;
        } else {
          dragDom.style.height = "auto";
          dragDom.style.width = nowWidth + "px";
          dragDom.style.marginTop = nowMarginTop;

          isFullScreen = false;

          dialogHeaderEl.style.cursor = "move";
          dialogHeaderEl.onmousedown = moveDown;
        }
      };

      dragDom.onmousemove = function (e) {
        // let moveE = e

        if (
          e.clientX > dragDom.offsetLeft + dragDom.clientWidth - 10 ||
          dragDom.offsetLeft + 10 > e.clientX
        ) {
          dragDom.style.cursor = "w-resize";
        } else if (
          el.scrollTop + e.clientY >
          dragDom.offsetTop + dragDom.clientHeight - 10
        ) {
          dragDom.style.cursor = "s-resize";
        } else {
          dragDom.style.cursor = "default";

          dragDom.onmousedown = null;
        }

        dragDom.onmousedown = (e) => {
          const clientX = e.clientX;
          const clientY = e.clientY;
          const elW = dragDom.clientWidth;
          const elH = dragDom.clientHeight;
          const EloffsetLeft = dragDom.offsetLeft;
          const EloffsetTop = dragDom.offsetTop;

          dragDom.style.userSelect = "none";

          const ELscrollTop = el.scrollTop;

          // 判断点击的位置是不是为头部
          if (
            clientX > EloffsetLeft &&
            clientX < EloffsetLeft + elW &&
            clientY > EloffsetTop &&
            clientY < EloffsetTop + 100
          ) {
            // 如果是头部在此就不做任何动作，以上有绑定dialogHeaderEl.onmousedown = moveDown;
          } else {
            document.onmousemove = function (e) {
              // 移动时禁用默认事件
              e.preventDefault();

              // 左侧鼠标拖拽位置
              if (clientX > EloffsetLeft && clientX < EloffsetLeft + 10) {
                // 往左拖拽
                if (clientX > e.clientX) {
                  dragDom.style.width = elW + (clientX - e.clientX) * 2 + "px";
                }

                // 往右拖拽
                if (clientX < e.clientX) {
                  if (dragDom.clientWidth < minWidth) {
                    console.log();
                  } else {
                    dragDom.style.width =
                      elW - (e.clientX - clientX) * 2 + "px";
                  }
                }
              }

              // 右侧鼠标拖拽位置
              if (
                clientX > EloffsetLeft + elW - 10 &&
                clientX < EloffsetLeft + elW
              ) {
                // 往左拖拽
                if (clientX > e.clientX) {
                  if (dragDom.clientWidth < minWidth) {
                    console.log();
                  } else {
                    dragDom.style.width =
                      elW - (clientX - e.clientX) * 2 + "px";
                  }
                }

                // 往右拖拽
                if (clientX < e.clientX) {
                  dragDom.style.width = elW + (e.clientX - clientX) * 2 + "px";
                }
              }

              // 底部鼠标拖拽位置
              if (
                ELscrollTop + clientY > EloffsetTop + elH - 20 &&
                ELscrollTop + clientY < EloffsetTop + elH
              ) {
                // 往上拖拽
                if (clientY > e.clientY) {
                  if (dragDom.clientHeight < minHeight) {
                    console.log();
                  } else {
                    dragDom.style.height =
                      elH - (clientY - e.clientY) * 2 + "px";
                  }
                }

                // 往下拖拽
                if (clientY < e.clientY) {
                  dragDom.style.height = elH + (e.clientY - clientY) * 2 + "px";
                }
              }
            };

            // 拉伸结束
            document.onmouseup = function (e) {
              document.onmousemove = null;

              document.onmouseup = null;
            };
          }
        };
      };
    },
  },
};
</script>

<style lang="scss">
.zhfc_dialog_img {
  .el-image-viewer__canvas {
    // width: 960px;
    // height: 400px;
    .cuurent-img {
      height: 416px;
      img {
        height: auto;
        max-height: max-content !important;
      }
    }
  }
  .is_display_none.el-dialog__wrapper {
    height: 0 !important;
    .cuurent-img {
      height: 100%;
    }
    .img-info-box .showList {
      // height:100%;
      height: calc(100% - 98px);
    }
    .el-image-viewer__btn.el-image-viewer__close {
      display: flex !important;
    }
  }
  .el-dialog__body {
    padding: 24px 30px !important;

    .el-image-viewer__wrapper {
      position: relative;
      &:focus {
        outline: none;
      }
      .el-image-viewer__btn.el-image-viewer__close {
        display: none;
      }
    }
    .img-list {
      ul {
        padding-top: 18px;
        background: #ffffff;
        height: 80px;
        li {
          width: 160px;
          height: 80px;
          margin-top: 0;
          margin: 0 12px 0 0;
          background: rgba(0, 0, 0, 0.3);
          opacity: 1;
          border-radius: 4px;
          &:last-child {
            margin-right: 0px;
          }
        }
      }
    }
  }
  .el-image-viewer__actions {
    display: none;
    color: #fff;
    opacity: 1 !important;
    border-radius: 0 !important;
    width: 100% !important;
    bottom: 0 !important;
    .showImgList {
      font-size: 14px;
    }
    background-color: rgba(0, 0, 0, 0.9) !important;
    .el-image-viewer__actions__inner {
      width: 550px;
    }
  }
  .img-info-box:hover {
    .el-image-viewer__actions {
      display: flex !important;
    }
  }
  .el-image-viewer__mask {
    display: none !important;
  }
  .el-dialog__footer {
    display: none !important;
  }
}
</style>